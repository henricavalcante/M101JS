1
00:00:00,008 --> 00:00:02,106
now wanna talk to you about how you can
use dot notation

2
00:00:03,006 --> 00:00:07,825
to reach deep into a document and and
Nexus something that in a sub document

3
00:00:07,879 --> 00:00:12,070
have the main document and also doing
this with things that are race

4
00:00:12,007 --> 00:00:15,044
so combining multi key with dot notation

5
00:00:15,044 --> 00:00:19,051
it's a pretty cool feature among many be
a little tricky to explain how it works

6
00:00:19,051 --> 00:00:22,130
and Mac work exactly as you expect so
let me show you some examples

7
00:00:23,003 --> 00:00:27,037
alright I'm back in the Mongo shell now
and I'm gonna look at this

8
00:00:27,064 --> 00:00:31,043
students collection once again to DB
that students not find one

9
00:00:31,619 --> 00:00:36,370
this is the same collection we look at
my previous lesson and it has

10
00:00:36,037 --> 00:00:39,726
these documents that have structure
where the student ID and then into

11
00:00:40,059 --> 00:00:41,010
scores are a

12
00:00:41,001 --> 00:00:44,960
and this was a ray has a bunch of
documents as elements in the array

13
00:00:44,969 --> 00:00:48,300
were each document has type examine a
score

14
00:00:48,003 --> 00:00:51,100
and is also a class ID so let's say we
wanted to index

15
00:00:52,027 --> 00:00:56,068
on this score itself we can do that the
call would be as follows:

16
00:00:56,068 --> 00:01:00,127
DB that students that create index
scores that score

17
00:01:00,739 --> 00:01:03,788
is one that's how we would do it that
would create an index

18
00:01:04,229 --> 00:01:08,080
they were index this array and the sub
par this document and I did this

19
00:01:08,008 --> 00:01:09,010
off-camera the took

20
00:01:09,028 --> 00:01:13,052
about 15-20 minutes to create the syntax
because his ten million documents this

21
00:01:13,052 --> 00:01:14,090
for element in this array

22
00:01:14,009 --> 00:01:17,093
and it took a long time so you can see
where indexes

23
00:01:18,074 --> 00:01:21,161
ahranat on the collection will do that
right now and

24
00:01:22,061 --> 00:01:25,086
if you call the doc indexes you can see
there are now two indexes on the

25
00:01:25,086 --> 00:01:25,140
collection

26
00:01:26,004 --> 00:01:29,049
one is an underscore I D and the other
one on scores that score

27
00:01:29,085 --> 00:01:32,894
which is a multi key index so what can
you do with that

28
00:01:33,659 --> 00:01:36,970
well first of all you could search for
records where

29
00:01:36,097 --> 00:01:39,138
any score was above a certain value so
it looks back worry looks like

30
00:01:40,038 --> 00:01:43,081
this will find everything where scores
that score

31
00:01:43,081 --> 00:01:46,127
is greater than 99% and actually reached
an understanding with the query

32
00:01:47,027 --> 00:01:48,056
optimizer does with it

33
00:01:48,299 --> 00:01:51,700
that actually seeing the results some
I'm using explain

34
00:01:51,007 --> 00:01:56,022
to return that information let's do that
ever did that query you can see that

35
00:01:56,085 --> 00:01:59,167
and gonna do an index can says right
here winning plan included

36
00:02:00,067 --> 00:02:03,073
the scores that score index in the
forward direction that look for things

37
00:02:04,027 --> 00:02:07,038
were scores that scores between 99.0
infinity

38
00:02:07,038 --> 00:02:10,697
and that's how it to retrieve this
information everyone to see that

39
00:02:11,039 --> 00:02:12,870
information we can just remove the
explain

40
00:02:12,087 --> 00:02:15,142
part of this and then with documents
back

41
00:02:16,042 --> 00:02:20,471
where there is a will least one score
above 99 but pretty printed we can see

42
00:02:20,849 --> 00:02:20,941
that more clearly

43
00:02:21,769 --> 00:02:24,910
you can see that in this case it was the
homework that was above

44
00:02:24,091 --> 00:02:27,091
99 so what if we want to find people

45
00:02:27,091 --> 00:02:30,095
that had an exam score that was above 99

46
00:02:31,031 --> 00:02:34,180
how would we do that now I'm gonna show
you the query

47
00:02:34,459 --> 00:02:38,840
and then I'll show you a crude I used
before I looked into it more carefully

48
00:02:38,084 --> 00:02:41,181
turned out to be wrong I think it's
interesting example because it easy to

49
00:02:42,081 --> 00:02:43,087
get confused about this

50
00:02:43,087 --> 00:02:47,145
so the crew that would search for all
the students where an exam scores but 99

51
00:02:48,045 --> 00:02:52,090
looks like this and it uses this LM at
operators were gonna go through this

52
00:02:52,009 --> 00:02:52,103
very carefully

53
00:02:53,084 --> 00:02:56,106
it's actually being run explain right
now but let let's look at

54
00:02:57,006 --> 00:03:00,015
so we're trying to inspect the scores
array

55
00:03:00,015 --> 00:03:04,039
inside document and then wanna find a
document

56
00:03:04,039 --> 00:03:07,084
which has an element of the array that
is a

57
00:03:07,084 --> 00:03:11,086
type exam and a score greater than 99.8

58
00:03:12,004 --> 00:03:16,011
and to do that we use this operator
called LM match

59
00:03:16,011 --> 00:03:19,062
lol match does and you can look it up in
documentation

60
00:03:19,062 --> 00:03:22,070
is it matches documents that contain an
array field

61
00:03:22,007 --> 00:03:26,012
with at least one element that matters
all the specified group criteria

62
00:03:26,075 --> 00:03:29,684
so in other words there might be more
than one element among the more than one

63
00:03:30,359 --> 00:03:33,500
examine this array that match this
criteria

64
00:03:33,005 --> 00:03:36,064
but we're going to make sure that we
match at least one with all this

65
00:03:37,009 --> 00:03:38,056
criteria so it's looking for

66
00:03:38,056 --> 00:03:41,105
element at the type exam and score
greater than

67
00:03:41,609 --> 00:03:44,980
99.8 and if we do that let's first

68
00:03:44,098 --> 00:03:48,103
just get the results we can confirm that
works to my pretty print the result we

69
00:03:49,048 --> 00:03:49,126
see that we get

70
00:03:50,026 --> 00:03:53,070
something that has an exam score about
99.8

71
00:03:53,007 --> 00:03:56,090
works perfectly well very nice wonder
how many records there are just a

72
00:03:57,053 --> 00:03:59,072
curiosity that would satisfy these
criteria

73
00:03:59,072 --> 00:04:02,081
and the answer is that there are 20,000
278

74
00:04:03,062 --> 00:04:06,241
student that satisfy these criteria of
having exam score

75
00:04:06,799 --> 00:04:10,690
greater than 99.8 in a somewhat random
data set

76
00:04:10,069 --> 00:04:14,708
up ten I and documents alright what are
the explain %uh public like this cuz

77
00:04:15,329 --> 00:04:15,367
thats

78
00:04:15,709 --> 00:04:19,620
that sort of interesting question to me
alright let's run this would explain now

79
00:04:19,062 --> 00:04:20,961
to see what the crew optimizer

80
00:04:21,519 --> 00:04:24,760
is gonna do to satisfy this query and do
that

81
00:04:24,076 --> 00:04:24,152
I need to

82
00:04:25,052 --> 00:04:28,053
remove discount the and I just need to
do

83
00:04:28,053 --> 00:04:31,112
and explain tell that I wanna see what
it would do with this find command

84
00:04:32,012 --> 00:04:36,018
gonna run that and it's pretty
interesting we're gonna go over explain

85
00:04:36,018 --> 00:04:36,907
in more detail

86
00:04:37,069 --> 00:04:40,110
but you can see is a worldwide
information here

87
00:04:40,011 --> 00:04:43,072
but the winning plan it's kinda easy to
read this from the

88
00:04:43,072 --> 00:04:46,143
bottom to the top because actually you
can't quite tell but

89
00:04:47,043 --> 00:04:50,074
this is the first thing it runs I
believe it says that first

90
00:04:50,074 --> 00:04:53,115
it runs a query on scores that score

91
00:04:54,015 --> 00:04:57,844
being 99.8 to infinity okay that makes
perfect sense

92
00:04:57,979 --> 00:05:01,060
because thats what the index is so we
can't do any better than to look at the

93
00:05:01,789 --> 00:05:02,808
scores that score

94
00:05:02,979 --> 00:05:07,041
key and after that it runs the output at
that this is an index can

95
00:05:07,599 --> 00:05:12,150
into the next stage where it does and
find all the doctor disaster that

96
00:05:12,015 --> 00:05:13,020
criteria which is probably

97
00:05:13,065 --> 00:05:17,264
Cenex or 45 X number documents that we
have an exam that score

98
00:05:17,849 --> 00:05:21,936
and then it runs the LM match and as you
know what I wanna find something with a

99
00:05:22,719 --> 00:05:23,460
score

100
00:05:23,046 --> 00:05:26,285
that's greater than 99.8 type that exam

101
00:05:26,699 --> 00:05:30,460
causes a fetch I don't believe in
anything special I can do here

102
00:05:30,046 --> 00:05:33,062
I think it actually generates to every
single document

103
00:05:33,062 --> 00:05:36,761
and inspect them and we can confirm that

104
00:05:37,319 --> 00:05:42,300
by running it with value true and let
execute the query tsunami documentary

105
00:05:42,003 --> 00:05:42,622
examines

106
00:05:42,919 --> 00:05:46,500
and the answer is that examined

107
00:05:46,005 --> 00:05:49,644
to right here regularly explain output
too hard to read on the screen

108
00:05:50,139 --> 00:05:53,197
but again we have the winning plan for
missions exactly the same as before

109
00:05:53,719 --> 00:05:56,744
but now we have furnish information call
execution stats

110
00:05:56,969 --> 00:06:00,063
and it is kinda go through here and look
at what's interesting

111
00:06:00,909 --> 00:06:04,910
and then we can see that it returned
twenty thousand documents

112
00:06:04,919 --> 00:06:08,050
okay it makes sense but it examined

113
00:06:08,005 --> 00:06:12,030
eighty thousand documents wow okay and
you know that number is it's probably

114
00:06:12,003 --> 00:06:13,482
the number of documents

115
00:06:13,779 --> 00:06:18,090
they have score about 99.8 so let's just
confirm that's true

116
00:06:18,009 --> 00:06:22,338
score greater than 99.8 give me a
counter those

117
00:06:22,419 --> 00:06:25,422
and there are 80,000 54

118
00:06:25,719 --> 00:06:29,150
documents they have score greater than
99.8 an

119
00:06:29,015 --> 00:06:32,023
and it examined every single one of them

120
00:06:32,095 --> 00:06:35,167
for this query see we can find this
information

121
00:06:36,067 --> 00:06:40,083
to the execution stats for the query and
you can see it examined 80,000

122
00:06:40,083 --> 00:06:43,142
54 documents to return 20,000 107 a
document

123
00:06:44,042 --> 00:06:48,043
that missus with mommy went to this
query is that use the index it had

124
00:06:48,043 --> 00:06:51,142
which was on scores not score and then
after that

125
00:06:52,042 --> 00:06:55,106
it is essential to scan everything that
resulted to do the LM at sparred

126
00:06:56,006 --> 00:07:00,015
alright now what mistakes I make my was
saying this lesson up and thinking about

127
00:07:00,015 --> 00:07:00,061
it

128
00:07:00,061 --> 00:07:03,096
turn out to be wrong and the answer is I
try to use this query

129
00:07:03,096 --> 00:07:06,161
and work with her to carefully but
Research UK to confuse me

130
00:07:07,061 --> 00:07:10,147
all right here the curry I tried to use
to get the answer every student had the

131
00:07:11,047 --> 00:07:11,110
exam

132
00:07:12,001 --> 00:07:15,004
about 99.8 I tried to use the and
operator

133
00:07:15,004 --> 00:07:18,020
and said you know what I wanna find
fangs

134
00:07:18,056 --> 00:07:22,058
where scores that type is examined
scores that score is greater than 99.8

135
00:07:22,058 --> 00:07:25,143
and when I did that you know what I
found I found document that look like

136
00:07:26,043 --> 00:07:26,099
this

137
00:07:26,099 --> 00:07:30,130
I found documents where there is a score
greater than 99.8

138
00:07:31,003 --> 00:07:34,094
but it wasn't for the exam really
interesting ha so actually

139
00:07:35,021 --> 00:07:38,105
if you use this and operator there's no
guarantee that when it find a doctor

140
00:07:39,005 --> 00:07:40,011
that satisfies

141
00:07:40,011 --> 00:07:43,015
this criteria without the L A match part
let it satisfies

142
00:07:43,051 --> 00:07:46,058
this criteria in the same sub-par might
be different part

143
00:07:46,058 --> 00:07:49,094
and this really comes out when you look
at the explain upper actually

144
00:07:49,094 --> 00:07:52,146
explain output help you understand the
way

145
00:07:53,046 --> 00:07:56,052
the database interpreted this query in
20 cities explain up it

146
00:07:56,052 --> 00:07:59,053
you like oh yeah of course makes perfect
sense so

147
00:07:59,062 --> 00:08:02,129
explain output said here's what we're
gonna do

148
00:08:03,029 --> 00:08:07,050
here's a winning plan okay it said in
the first stage

149
00:08:07,005 --> 00:08:10,096
in this lowest level stage I wanna find
everything with scores that score above

150
00:08:11,041 --> 00:08:12,041
99.8

151
00:08:12,041 --> 00:08:15,058
and pass that up to the next stage and
the next age

152
00:08:15,058 --> 00:08:18,131
should look for things that scores that
I people exam ho dear that's not right

153
00:08:19,031 --> 00:08:22,080
because basically it's returning all
these documents during a huge number of

154
00:08:22,008 --> 00:08:25,032
documents from the stage at 12 we know
how many the 80,000

155
00:08:26,004 --> 00:08:30,081
students have 99.8 and above so first
does this query find all the students

156
00:08:30,081 --> 00:08:30,123
with us

157
00:08:31,023 --> 00:08:35,052
with any score above 99.8 their past
that this next agent says

158
00:08:35,052 --> 00:08:38,054
now buy me all the documents where
scores that type

159
00:08:38,072 --> 00:08:41,163
is equal to exam and that's not going to
work

160
00:08:42,063 --> 00:08:45,162
because that is gonna give you things
where the score was not for the actual

161
00:08:46,062 --> 00:08:46,140
exam

162
00:08:47,004 --> 00:08:50,061
now compare that output to watch out we
got

163
00:08:50,097 --> 00:08:55,102
for the correct query but the ally
matsch we use the correct query for this

164
00:08:56,002 --> 00:09:00,002
look at the output very different in
that case the first aid to the query

165
00:09:00,002 --> 00:09:04,013
did the exact same thing at look for
things with scores that score but 99.8

166
00:09:04,013 --> 00:09:07,035
but in the second stage lenders look for
them to type exam

167
00:09:07,035 --> 00:09:10,042
we looked for an element match where
both conditions were true

168
00:09:11,005 --> 00:09:14,022
with the score was again 99.8 reaffirmed

169
00:09:14,022 --> 00:09:17,118
that this was true for the document and
that the type was exam her right

170
00:09:18,018 --> 00:09:21,086
headline inflation I hope that helps
better explain

171
00:09:21,086 --> 00:09:24,138
no pun intended how that works okay time
for quitters

172
00:09:25,038 --> 00:09:28,065
spose have a collection call people in
the database earth

173
00:09:28,065 --> 00:09:31,092
and documents in the following form: you
can see the documents here

174
00:09:31,092 --> 00:09:34,094
what would be the command in the manga
shell to create an index

175
00:09:34,094 --> 00:09:37,157
on company descending please type your
answer right down here

